plugins {
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "java-library"
    // id 'org.openjfx.javafxplugin' version '0.0.8'
}

mainClassName = 'ohtu.Main'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

jar {
    manifest {
        attributes 'Main-Class':'ohtu.Main'
    }
}

run {
    standardInput = System.in
}

// javafx {
//     version = '11'
//     modules = [ 'javafx.controls', 'javafx.fxml' ]
// }

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['ohtu/Main.class','ohtu/userinterface/UserInterface.class','ohtu/utilities/DataLoader.class'])
        }))
    }
}

repositories {
    jcenter()
    mavenCentral()
}


dependencies {
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.32.3.2'
    implementation 'commons-io:commons-io:2.8.0'
    testImplementation 'io.cucumber:cucumber-java:6.9.0'
    testImplementation 'io.cucumber:cucumber-junit:6.9.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.6.0'
    // javafx
    // testImplementation "org.testfx:testfx-core:4.0.+"
    // testImplementation "org.testfx:testfx-junit:4.0.+"
    // testImplementation "org.testfx:openjfx-monocle:jdk-11+26"
    // database connection managed with sqlite
}

test {
  // set a system property for the test JVM(s)
  // systemProperty 'testfx.robot', 'glass'
  // systemProperty 'testfx.headless', 'true' // set false to see test running
  systemProperty 'prism.order', 'sw'
  systemProperty 'prism.text', 't2k'
  systemProperty 'java.awt.headless', 'true'

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }

  // Fail the 'test' task on the first test failure
  failFast = true

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + event.message )
     //(Test: " + descriptor + " produced standard out/err: " + event.message)
  } 
}
